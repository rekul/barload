var queryParams = {};
var tmp = document.location.href.split('?');
if (tmp.length > 1) {
    var params = tmp[1].split('&');
    for (var i = 0; i < params.length; i++) {
        var tmp2 = params[i].split('=');
        queryParams[tmp2[0]] = tmp2[1];
    }
}

// Avoid console errors in browsers that lack a console.
(function() {
    var method;
    var noop = function() {};
    var methods = [
        'assert',
        'clear',
        'count',
        'debug',
        'dir',
        'dirxml',
        'error',
        'exception',
        'group',
        'groupCollapsed',
        'groupEnd',
        'info',
        'log',
        'markTimeline',
        'profile',
        'profileEnd',
        'table',
        'time',
        'timeEnd',
        'timeline',
        'timelineEnd',
        'timeStamp',
        'trace',
        'warn'
    ];
    var length = methods.length;
    var console = (window.console = window.console || {});

    while (length--) {
        method = methods[length];

        // Only stub undefined methods.
        if (!console[method]) {
            console[method] = noop;
        }
    }
}());

function makeBool(val) {
    if (val == 'true') {
        return true;
    }
    return false;
}

function isIE9() {
    //alert(navigator.userAgent);
    if (navigator.userAgent.indexOf('MSIE 9') > -1) {
        return true;
    } else {
        return false;
    }
}

function isMobile() {
    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));
}

function str_replace(txt, was, is) {
    var tmp = txt.split(was);
    return tmp.join(is);
}
function str_shrink(obj, tgt) {
    var tmp = obj.css('font-size').split('px');
    var fontSize = tmp[0];
    while ($(obj).height() > tgt) {
        fontSize--;
        $(obj).css('font-size', fontSize + 'px');
    }
}

$.fn.extend({
    animateCss: function(args) {
        if (isIE9()) {
            if (args.callback != undefined) {
                args.callback();
            }
        } else {
            var vendors = ['webkit', 'moz', 'MS'];
            var animationEnd = [];
            var timing = {};
            var delay = {};
            var repeat = {};
            for (var i = 0; i < vendors.length; i++) {
                animationEnd.push(vendors[i] + 'AnimationEnd');
                if (args.time != undefined) {
                    timing['-' + vendors[i] + '-animation-duration'] = args.time;
                }
                if (args.delay != undefined) {
                    delay['-' + vendors[i] + '-animation-delay'] = args.delay;
                }
                if (args.repeat != undefined) {
                    repeat['-' + vendors[i] + '-animation-iteration-count'] = args.repeat;
                }
            }

            //var animationEnd = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';
            if (args.time != undefined) {
                $(this).css(timing);
            }
            if (args.delay) {
                $(this).css(delay);
            }
            if (args.repeat) {
                $(this).css(repeat);
            }

            $(this).addClass('animated ' + args.name).on(animationEnd.join(' ') + ' oanimationend animationend', function() {
                $(this).removeClass('animated ' + args.name);
                if (args.callback != undefined) {
                    args.callback();
                }
            });
        }
    }
});

var VideoPlayer = (function(src, w, h, poster, callback) {
    _videoPlayer = this;
    callback = callback || function() {};
    poster = poster || '';
    this.div = $('<div class="video" />');
    if (w !== undefined && w !== '')
        this.div.css('width', w);
    if (h !== undefined && h !== '')
        this.div.css('height', h);
    this.onEnd; // function
    this.onVolume; // function
    this.vid = $('<video preload autoplay controls width="' + w + '"></video>');
    this.vid.append('<source src="' + src + '">');
    this.div.append(this.vid);

    if (poster != '')
        this.div.attr('poster', poster);

    this.vid.bind('ended', function() {
        try {
            _videoPlayer.onEnd(callback);
        } catch (e) {}
    });
    this.vid.bind('volumechange', function() {
        try {
            _videoPlayer.onVolume(this.volume);
        } catch (e) {}
    });
});

VideoPlayer.prototype = {
    goToTime: function(n) {
        this.vid[0].currentTime = n;
        this.vid[0].pause();
    },

    attach: function(sel) {
        $(sel).append(this.div);
    },

    setDevice: function(n) {
        this.div.addClass(n);
    },

    play: function() {
        this.vid[0].play();
    },

    pause: function() {
        this.vid[0].pause();
    },

    volume: function(n) {
        if (n != undefined) {
            this.vid[0].volume = n;
        }
        return this.vid[0].volume;
    },

    onEnd: function(callback) {
        callback();
    }
};
